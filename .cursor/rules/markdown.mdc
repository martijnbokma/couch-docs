---
description: "Comprehensive style guide for CouchCMS documentation"
globs: ["**/*.md", "**/*.mdx"]
alwaysApply: true
---

# CouchCMS Documentation Style Guide

This comprehensive style guide outlines all rules for writing CouchCMS documentation.  
The primary goals are consistency, readability, maintainability, and accessibility.

---

## 1. Document Structure

### 1.1 Required Frontmatter

Every document MUST begin with frontmatter containing these required fields:

```markdown
---
title: "Document Title"
description: "A clear, concise description of the document"
keywords:
    - keyword 1
    - keyword 2
    - keyword 3
category: tutorial
subCategory: advanced-tutorial
author: Kamran Kashif
lastUpdated: YYYY-MM-DD
sidebar:
    order: N
---
```

#### Notes:

- Use quotes for `title` and `description` to prevent YAML parsing issues
- Indent nested properties with 4 spaces for consistency
- `subCategory` is required for tutorials, optional for other categories
- `sidebar.order` determines the position in navigation (lower numbers appear first)

### 1.2 Required Components

Import necessary components immediately after the frontmatter:

```astro
import { Steps } from '@astrojs/starlight/components';
```

---

## 2. Content Formatting

### 2.1 Text Formatting

- Use asterisks (*) for italic text: *example\*
- Never use underscores (\_) for italic text
- Use double asterisks (**) for bold text: **example\*\*
- Use backticks (`) for inline code: `example`

### 2.2 Headings

- Use **Title Case** for all headings
- Leave one blank line before and after headings
- Follow proper hierarchy without skipping levels
- Start content sections with H2 (##)

```markdown
# Document Title

## Overview

### Key Features

#### Specific Details
```

### 2.3 Technical References

#### Variable Names:

- Use backticks for all variable names: `my_variable`
- Use backticks for system variables: `rt_id`
- Use backticks for parameter names: `my_current_pad`

#### Text Formatting:

- Use asterisks (*) for italic text: *example\*
- Never use underscores (\_) for italic text
- Use double asterisks (**) for bold text: **example\*\*

#### File References:

- Use backticks for file paths: `views/notes/create_view.html`
- Use backticks for file names: `create_view.html`

### 2.4 Code Blocks

#### Code Block Headers:

Always include a descriptive title for code blocks:

```php title="File Name or Description"
// Code here
```

#### URL Examples:

Use `txt` format with title for URL examples:

```txt title="Example URLs"
https://www.example.com/path
# or without prettyURLs:
https://www.example.com/index.php?q=path
```

#### Partial Code:

For omitted code sections, use language-appropriate comments:

```php
// ... existing code ...
```

### 2.5 Links

#### Internal Links:

- Use relative paths for internal documentation links
- Navigate up with `../` when needed
- Include meaningful link text

```markdown
[Previous Section](../previous-section)
[Next Section](./next-section)
```

#### External Links:

- Include full URLs for external links
- Add meaningful context in link text

```markdown
[CouchCMS Documentation](https://docs.couchcms.com)
```

### 2.6 Images

- Always include descriptive alt text
- Use relative paths for internal images
- Add captions when helpful

```markdown
![Descriptive Alt Text](./img/screenshot.png)
```

### 2.7 Punctuation and Lists

#### Colons vs Dashes:

- Use colons (`:`) before code blocks, examples, or lists
- Never use dashes (`-`) before code blocks
- Use a blank line after a colon when followed by a code block

Example:

````markdown
Here is an example:

\```php
code here
\```
````

#### Example Text and Titles:

- Use code blocks with `txt` type for example output or titles
- Add quotes in the text, not in code blocks
- Always add a blank line before example blocks

Example:

````markdown
The page will show this title:

\```txt
My Example Title
\```
````

### 2.8 Code Block Usage

#### When to Use Code Blocks:

- For all code examples
- For example output
- For example titles or messages
- For URLs and file paths that need highlighting

#### Code Block Types:

- Use `php` for PHP code
- Use `txt` for plain text, URLs, and example output
- Use `markdown` for markdown examples
- Use `astro` for Astro component examples

### 2.9 Admonitions

Use these specific admonition types for different purposes:

#### Types and Usage:

- `:::note` - For additional information and side notes
- `:::tip` - For helpful tips and best practices
- `:::caution` - For important warnings that need attention
- `:::danger` - For critical warnings about breaking changes or serious issues

Example:

```markdown
:::note[Additional Info]
This is extra information that might be helpful.
:::

:::danger[Breaking Change]
This change will affect existing installations.
:::
```

### 2.10 Whitespace and Spacing

#### Between Sections:

- Leave 2 blank lines between major sections (H2)
- Leave 1 blank line between subsections (H3, H4)
- Leave 1 blank line before and after code blocks
- Leave 1 blank line before and after admonitions

Example:

```markdown
## Major Section

This is content.

## Next Major Section

### Subsection

Content here.

:::note
Note content
:::

More content.
```

### 2.11 Version Numbers

When referencing CouchCMS versions:

- Use `v` prefix for version numbers: `v2.0`
- Include all version components for specific releases: `v2.1.1`
- Use `vX.X` for generic version references
- Highlight breaking changes between major versions

Example:

```markdown
Starting from `v2.0`, this feature is available.
This was changed in `v2.1.1` to improve performance.
```

---

## 3. Technical Content

### 3.1 Code Examples

- Include complete, working examples
- Add titles to all code blocks
- Use proper syntax highlighting
- Include comments for complex code

### 3.2 Variables and Parameters

- Use consistent naming throughout documentation
- Explain all parameters and their purpose
- Use backticks for all technical terms
- Format system variables consistently

Example:

```markdown
The `rt_id` variable contains the route parameter value.
```

---

## 4. Navigation

### 4.1 Section Links

At the end of each document, include navigation links:

```markdown
---

**Next: [Next Section →](./next-section)**
```

### 4.2 Related Content

Use admonitions to reference related content:

```markdown
:::note[Related Content]
See also: [Related Topic](../related-topic)
:::
```

---

## 5. Quality Checklist

✅ Proper frontmatter with all required fields  
✅ Consistent heading hierarchy  
✅ Descriptive code block titles  
✅ Technical terms in backticks  
✅ Proper link formatting  
✅ Descriptive image alt text  
✅ Navigation links  
✅ Proper spacing and formatting

---

## 6. Best Practices

1. Keep technical terminology consistent
2. Use clear, concise language
3. Provide working code examples
4. Include proper navigation
5. Maintain consistent formatting
6. Add helpful admonitions
7. Use descriptive titles
8. Include complete documentation

---

## 7. Quality Standards

### 7.1 Consistency Requirements

Ensure uniformity in the following areas:

- Spacing between elements (e.g., blank lines around headings)
- Proper indentation for nested lists and code blocks
- Standardized naming conventions for files, variables, and components

### 7.2 Documentation Checklist

✅ Complete frontmatter fields  
✅ Required components imported after frontmatter  
✅ Headings formatted in Title Case  
✅ Code blocks include language specification  
✅ Links are valid and correctly formatted  
✅ Images have descriptive alt text  
✅ Admonitions used appropriately  
✅ Consistent spacing throughout

---

## 8. Technical Guidelines

### 8.1 File References

Follow these rules when referencing files:

- Always use backticks for filenames (`file.php`)
- Use forward slashes (`/`) for paths
- Prefer relative internal paths over absolute ones
- Include file sizes when relevant (e.g., "image.jpg - 45 KB")

### 8.2 HTML Elements in Markdown

When using HTML elements within Markdown:

- Wrap tags in backticks (`<div>`)
- Use descriptive attributes where necessary (e.g., `<img alt="Description">`)
- Consistently format nested elements like `<dl>`, `<dt>`, and `<dd>`

---

## 9. Accessibility Guidelines

To ensure your documentation is accessible to all users:

1. **Alt Text**: Provide meaningful descriptions for images
2. **Headings**: Use logical hierarchy to improve navigation
3. **Links**: Avoid vague link text like "click here"; use descriptive phrases instead
4. **Color Contrast**: Avoid relying solely on color to convey meaning

---

## 10. Common Corrections

Fix common spelling mistakes and maintain consistent grammar across all documentation:

| Incorrect   | Correct      |
| ----------- | ------------ |
| neccessary  | necessary    |
| additionaly | additionally |
| permenantly | permanently  |
| fidelety    | fidelity     |
| incidently  | incidentally |
| seperate    | separate     |

---

## 11. Content Preservation Rules

### 11.1 Code Preservation Rules:

1. **Existing Code**

    - NEVER modify code content without explicit instruction
    - Keep all comments, including their formatting
    - Preserve exact indentation and spacing
    - Maintain original variable names and values

2. **Partial Code Display**

    - Use `// ... existing code ...` for PHP
    - Use `<!-- ... existing code ... -->` for HTML
    - Use `/* ... existing code ... */` for CSS
    - Place these on their own line with original indentation

3. **Code Block Formatting**
    - Keep original language specifications
    - Maintain existing titles if present
    - Preserve any special formatting or highlighting

Example of proper code preservation:

```php title="Original Code Structure"
function my_function() {
    // ... existing code ...
    $new_code = 'example';
    // ... existing code ...
}
```

### 11.2 Text Preservation:

1. Maintain original technical terminology
2. Do not rewrite or rephrase existing sentences without explicit instruction
3. Keep URLs and references intact

---

## 12. Recommended Tools & Automation

To streamline compliance with these guidelines:

1. **Linting Tools**: Use tools like [Markdownlint](https://github.com/DavidAnson/markdownlint) to automate style checks
2. **CI/CD Integration**: Set up automated checks in your repository to validate Markdown syntax during pull requests
3. **Example Files**: Provide sample Markdown files that adhere to these rules as templates for contributors

---

## Conclusion

By following this style guide, you can ensure that CouchCMS documentation remains consistent, readable, accessible, and technically accurate across all files.

---
