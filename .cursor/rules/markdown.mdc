---
description: "Comprehensive style guide for CouchCMS documentation"
globs: ["**/*.md", "**/*.mdx"]
alwaysApply: true
---

# CouchCMS Documentation Style Guide

This comprehensive style guide outlines all rules for writing CouchCMS documentation.  
The primary goals are consistency, readability, maintainability, and accessibility.

---

## 1. Document Structure

### 1.1 Required Frontmatter

Every document MUST begin with frontmatter containing these required fields:

```markdown title="Required Frontmatter Structure"
---
title: "Document Title"
description: "A clear, concise description of the document"
keywords:
    - keyword 1
    - keyword 2
    - keyword 3
category: tutorial
subCategory: advanced-tutorial
author: Kamran Kashif
lastUpdated: YYYY-MM-DD
sidebar:
    order: N
---
```

#### Notes:

- Use quotes for `title` and `description` to prevent YAML parsing issues
- Indent nested properties with 4 spaces for consistency
- `subCategory` is required for tutorials, optional for other categories
- `sidebar.order` determines the position in navigation (lower numbers appear first)

### 1.2 Import Statements

#### Required Components

Import necessary components immediately after the frontmatter:

```astro title="Required Component Import"
import { Steps } from '@astrojs/starlight/components';
```

#### Import Rules:

- Place imports directly after frontmatter
- Leave one blank line after imports
- Use single quotes for import paths
- Sort imports alphabetically when multiple
- Group imports by type (components, utilities, etc.)

Example of multiple imports:

```astro title="Multiple Component Imports"
import { CardGrid } from '@astrojs/starlight/components';
import { Steps } from '@astrojs/starlight/components';
import { Tabs, TabItem } from '@astrojs/starlight/components';

import '../styles/custom.css';
```

### 1.3 Document Layout

Follow this order in your documents:

1. Frontmatter
2. Import statements
3. Brief introduction
4. Main content
5. Navigation links

Leave appropriate spacing:

- One blank line after frontmatter
- One blank line after imports
- Two blank lines between major sections
- One blank line between subsections

---

## 2. Content Formatting

### 2.1 Text Formatting

Use consistent formatting for text emphasis and code references:

- Use backticks (`) for:
    - Variable names: `my_variable`
    - System variables: `rt_id`
    - Parameter names: `my_current_pad`
    - File paths: `views/notes/create_view.html`
    - File names: `create_view.html`
    - Code snippets: `echo "Hello"`
- Use asterisks (*) for italic text: *example\*
- Use double asterisks (**) for bold text: **example\*\*
- Never use underscores (\_) for emphasis

### 2.2 Headings

- Use **Title Case** for all headings
- Leave one blank line before and after headings
- Follow proper hierarchy without skipping levels
- Start content sections with H2 (##)

```markdown
# Document Title

## Overview

### Key Features

#### Specific Details
```

### 2.3 Technical References

See section 2.1 for text formatting rules.

#### File References:

- Always use forward slashes (/) in paths
- Include file extensions
- Use relative paths when possible
- For images, include size if relevant

Examples:

```txt title="File Path Examples"
views/templates/default.php
../images/logo.png (45KB)
./styles/custom.css
```

### 2.4 Code Blocks

#### Code Block Headers:

Always include a descriptive title for code blocks using the `title` attribute:

```php title="Example PHP Function"
// Code here
```

#### Title Format Rules:

- Use Title Case for all code block titles
- Make titles descriptive but concise
- Include language or type indication when relevant
- Use quotes consistently in titles

Examples of good titles:

- "Basic HTML Form"
- "PHP Function Example"
- "Database Query Result"
- "Configuration Object"

#### URL Examples:

Use `txt` format with title for URL examples:

```txt title="Example URLs"
https://www.example.com/path
# or without prettyURLs:
https://www.example.com/index.php?q=path
```

#### Partial Code:

For omitted code sections, use language-appropriate comments:

```php
// ... existing code ...
```

### 2.5 Links

#### Internal Links:

- Use relative paths for internal documentation links
- Navigate up with `../` when needed
- Include meaningful link text

```markdown
[Previous Section](../previous-section)
[Next Section](./next-section)
```

#### External Links:

- Include full URLs for external links
- Add meaningful context in link text

```markdown
[CouchCMS Documentation](https://docs.couchcms.com)
```

### 2.6 Images

- Always include descriptive alt text
- Use relative paths for internal images
- Add captions when helpful

```markdown
![Descriptive Alt Text](./img/screenshot.png)
```

### 2.7 Punctuation and Lists

#### Colons vs Dashes:

- Use colons (`:`) before code blocks, examples, or lists
- Never use dashes (`-`) before code blocks
- Use a blank line after a colon when followed by a code block

#### Example Text and Titles:

- Use code blocks with `txt` type for example output or titles
- Add quotes in the text, not in code blocks
- Always add a blank line before example blocks

### 2.8 Code Block Usage

#### When to Use Code Blocks:

Use code blocks for:

- All code examples
- Example output
- Example titles or messages
- URLs and file paths that need highlighting

Here are the supported code block types:

- Use `php` for PHP code
- Use `txt` for plain text, URLs, and example output
- Use `markdown` for markdown examples
- Use `astro` for Astro component examples

Examples:

```php title="PHP Example"
echo "Hello World";
```

```txt title="Example Output"
Hello World
```

```txt title="Example File Path"
/path/to/file.php
```

### 2.9 Admonitions

Use specific admonition types for different purposes:

```markdown title="Note Example"
:::note[About Feature]
Use for additional information and context
:::
```

```markdown title="Tip Example"
:::tip[Best Practice]
Use for best practices and recommendations
:::
```

```markdown title="Caution Example"
:::caution[Important]
Use for important limitations or warnings
:::
```

```markdown title="Danger Example"
:::danger[Critical]
Use for critical warnings that could cause data loss
:::
```

#### Admonition Rules:

- Always include a descriptive title in square brackets
- Keep content concise and focused
- Use appropriate type for the content
- Leave one blank line before and after

### 2.10 Whitespace and Spacing

#### Between Sections:

- Leave 2 blank lines between major sections (H2)
- Leave 1 blank line between subsections (H3, H4)
- Leave 1 blank line before and after code blocks
- Leave 1 blank line before and after admonitions

Example:

```markdown
## Major Section

This is content.

## Next Major Section

### Subsection

Content here.

:::note
Note content
:::

More content.
```

### 2.11 Version Numbers

When referencing CouchCMS versions:

- Use `v` prefix for version numbers: `v2.0`
- Include all version components for specific releases: `v2.1.1`
- Use `vX.X` for generic version references
- Highlight breaking changes between major versions

Example:

```markdown
Starting from `v2.0`, this feature is available.
This was changed in `v2.1.1` to improve performance.
```

### 2.12 Tables

#### Table Formatting

- Use standard markdown table syntax
- Include header row
- Align columns appropriately:
    - Left-align text (`:---)`)
    - Right-align numbers (`---:`)
    - Center-align headers (`:-:`)
- Add blank lines before and after tables

Example:

```markdown title="Table Format Example"
| Name     | Type    | Default | Description       |
| :------- | :------ | ------: | :---------------- |
| size     | number  |      10 | Input field size  |
| required | boolean |   false | Is field required |
| type     | string  |    text | Input field type  |
```

#### Table Best Practices

- Keep tables simple and readable
- Use consistent column widths
- Add header row separators
- Use proper alignment for data types

---

## 3. Technical Content

### 3.1 Code Examples

- Include complete, working examples
- Add titles to all code blocks
- Use proper syntax highlighting
- Include comments for complex code

### 3.2 Variables and Parameters

- Use consistent naming throughout documentation
- Explain all parameters and their purpose
- Use backticks for all technical terms
- Format system variables consistently

Example:

```markdown
The `rt_id` variable contains the route parameter value.
```

---

## 4. Navigation

### 4.1 Section Links

At the end of each document, include navigation links:

```markdown
---

**Next: [Next Section →](./next-section)**
```

### 4.2 Related Content

Use admonitions to reference related content:

```markdown
:::note[Related Content]
See also: [Related Topic](../related-topic)
:::
```

---

## 5. Quality Checklist

✅ Proper frontmatter with all required fields  
✅ Consistent heading hierarchy  
✅ Descriptive code block titles  
✅ Technical terms in backticks  
✅ Proper link formatting  
✅ Descriptive image alt text  
✅ Navigation links  
✅ Proper spacing and formatting

---

## 6. Best Practices

1. Keep technical terminology consistent
2. Use clear, concise language
3. Provide working code examples
4. Include proper navigation
5. Maintain consistent formatting
6. Add helpful admonitions
7. Use descriptive titles
8. Include complete documentation

---

## 7. Quality Standards

### 7.1 Consistency Requirements

Ensure uniformity in the following areas:

- Spacing between elements (e.g., blank lines around headings)
- Proper indentation for nested lists and code blocks
- Standardized naming conventions for files, variables, and components

### 7.2 Documentation Checklist

✅ Complete frontmatter fields  
✅ Required components imported after frontmatter  
✅ Headings formatted in Title Case  
✅ Code blocks include language specification  
✅ Links are valid and correctly formatted  
✅ Images have descriptive alt text  
✅ Admonitions used appropriately  
✅ Consistent spacing throughout

---

## 8. Technical Guidelines

### 8.1 File References

Follow these rules when referencing files:

- Always use backticks for filenames (`file.php`)
- Use forward slashes (`/`) for paths
- Prefer relative internal paths over absolute ones
- Include file sizes when relevant (e.g., "image.jpg - 45 KB")

### 8.2 HTML Elements in Markdown

When using HTML elements within Markdown:

- Wrap HTML tags in backticks
- Use proper attributes
- Maintain consistent indentation
- Follow HTML5 standards

Examples:

```markdown title="HTML in Markdown"
Use the `<div>` element for blocks.

Image with alt text: `<img src="image.jpg" alt="Description">`

Definition lists:
`<dl>`
`<dt>`Term`</dt>`
`<dd>`Definition`</dd>`
`</dl>`
```

### 9. Accessibility Guidelines

To ensure documentation is accessible:

1. **Images and Alt Text**

```markdown title="Image with Alt Text"
![A form with two input fields and a submit button](./form-example.png)
```

2. **Heading Structure**

```markdown title="Proper Heading Structure"
# Main Title

## Section

### Subsection

#### Detail
```

3. **Link Text**

```markdown title="Link Text Examples"
<!-- Bad -->

[Click here](./page) to learn more

<!-- Good -->

[Learn more about form validation](./form-validation)
```

4. **Color and Contrast**

```markdown title="Color Reference"
Use `#0066cc` for links (WCAG AA compliant)
Use `#333333` for main text (WCAG AAA compliant)
```

---

## 10. Common Corrections

Fix common spelling mistakes and maintain consistent grammar across all documentation:

| Incorrect   | Correct      |
| ----------- | ------------ |
| neccessary  | necessary    |
| additionaly | additionally |
| permenantly | permanently  |
| fidelety    | fidelity     |
| incidently  | incidentally |
| seperate    | separate     |

---

## 11. Content Preservation Rules

### 11.1 Code Preservation Rules:

1. **Absolute Preservation**

    - NEVER modify ANY code content unless explicitly instructed
    - Code blocks are considered immutable by default
    - Form examples must remain exactly as provided
    - HTML and PHP examples must maintain exact spacing and format

2. **Form Code Examples**

    - Keep all HTML attributes in their original order
    - Preserve exact whitespace in form elements
    - Maintain original line breaks in form examples
    - Keep comments exactly as they appear
    - Never reformat form structure or indentation

3. **Partial Code Display**

    - Use `// ... existing code ...` for PHP
    - Use `<!-- ... existing code ... -->` for HTML
    - Use `/* ... existing code ... */` for CSS
    - Place these on their own line with original indentation
    - Never modify surrounding code context

4. **Code Block Formatting**
    - Keep original language specifications
    - Maintain existing titles if present
    - Preserve any special formatting or highlighting
    - Never auto-format code unless explicitly requested
    - Keep original quote styles (single/double)

Example of proper form code preservation:

```html title="Original Form Structure"
<form method="post" action="contact.php">
    Name: <input type="text" size="10" maxlength="40" name="name" /> <br />
    Email: <input type="text" size="10" name="email" /> <br />

    <input type="submit" value="Send" />
</form>
```

### 11.2 Special Cases

1. **Form Documentation**

    - Keep exact HTML/PHP syntax as shown
    - Preserve attribute ordering in examples
    - Maintain original spacing around form elements
    - Keep line breaks and indentation as is
    - Never reformat or "prettify" form code

2. **Code Comparisons**
    - When showing before/after examples, keep both exactly as provided
    - Do not normalize differences in style or formatting
    - Preserve intentional variations in coding style

### 11.3 Text Preservation:

1. Maintain original technical terminology
2. Do not rewrite or rephrase existing sentences without explicit instruction
3. Keep URLs and references intact

---

## 12. Recommended Tools & Automation

To streamline compliance with these guidelines:

1. **Linting Tools**: Use tools like [Markdownlint](https://github.com/DavidAnson/markdownlint) to automate style checks
2. **CI/CD Integration**: Set up automated checks in your repository to validate Markdown syntax during pull requests
3. **Example Files**: Provide sample Markdown files that adhere to these rules as templates for contributors

---

## Conclusion

By following this style guide, you can ensure that CouchCMS documentation remains consistent, readable, accessible, and technically accurate across all files.

---
